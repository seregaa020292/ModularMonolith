//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Vehicles = newVehiclesTable("public", "vehicles", "")

type vehiclesTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnString
	LicensePlate postgres.ColumnString
	Model        postgres.ColumnString
	OwnerID      postgres.ColumnString
	CreatedAt    postgres.ColumnTimestampz
	UpdatedAt    postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type VehiclesTable struct {
	vehiclesTable

	EXCLUDED vehiclesTable
}

// AS creates new VehiclesTable with assigned alias
func (a VehiclesTable) AS(alias string) *VehiclesTable {
	return newVehiclesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VehiclesTable with assigned schema name
func (a VehiclesTable) FromSchema(schemaName string) *VehiclesTable {
	return newVehiclesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new VehiclesTable with assigned table prefix
func (a VehiclesTable) WithPrefix(prefix string) *VehiclesTable {
	return newVehiclesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new VehiclesTable with assigned table suffix
func (a VehiclesTable) WithSuffix(suffix string) *VehiclesTable {
	return newVehiclesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newVehiclesTable(schemaName, tableName, alias string) *VehiclesTable {
	return &VehiclesTable{
		vehiclesTable: newVehiclesTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newVehiclesTableImpl("", "excluded", ""),
	}
}

func newVehiclesTableImpl(schemaName, tableName, alias string) vehiclesTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		LicensePlateColumn = postgres.StringColumn("license_plate")
		ModelColumn        = postgres.StringColumn("model")
		OwnerIDColumn      = postgres.StringColumn("owner_id")
		CreatedAtColumn    = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampzColumn("updated_at")
		allColumns         = postgres.ColumnList{IDColumn, LicensePlateColumn, ModelColumn, OwnerIDColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns     = postgres.ColumnList{LicensePlateColumn, ModelColumn, OwnerIDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return vehiclesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		LicensePlate: LicensePlateColumn,
		Model:        ModelColumn,
		OwnerID:      OwnerIDColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
