//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Payments = newPaymentsTable("public", "payments", "")

type paymentsTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnString
	FineID        postgres.ColumnString
	PaidDate      postgres.ColumnTimestampz
	Amount        postgres.ColumnFloat
	PaymentMethod postgres.ColumnString
	CreatedAt     postgres.ColumnTimestampz
	UpdatedAt     postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PaymentsTable struct {
	paymentsTable

	EXCLUDED paymentsTable
}

// AS creates new PaymentsTable with assigned alias
func (a PaymentsTable) AS(alias string) *PaymentsTable {
	return newPaymentsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PaymentsTable with assigned schema name
func (a PaymentsTable) FromSchema(schemaName string) *PaymentsTable {
	return newPaymentsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PaymentsTable with assigned table prefix
func (a PaymentsTable) WithPrefix(prefix string) *PaymentsTable {
	return newPaymentsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PaymentsTable with assigned table suffix
func (a PaymentsTable) WithSuffix(suffix string) *PaymentsTable {
	return newPaymentsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPaymentsTable(schemaName, tableName, alias string) *PaymentsTable {
	return &PaymentsTable{
		paymentsTable: newPaymentsTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newPaymentsTableImpl("", "excluded", ""),
	}
}

func newPaymentsTableImpl(schemaName, tableName, alias string) paymentsTable {
	var (
		IDColumn            = postgres.StringColumn("id")
		FineIDColumn        = postgres.StringColumn("fine_id")
		PaidDateColumn      = postgres.TimestampzColumn("paid_date")
		AmountColumn        = postgres.FloatColumn("amount")
		PaymentMethodColumn = postgres.StringColumn("payment_method")
		CreatedAtColumn     = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn     = postgres.TimestampzColumn("updated_at")
		allColumns          = postgres.ColumnList{IDColumn, FineIDColumn, PaidDateColumn, AmountColumn, PaymentMethodColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns      = postgres.ColumnList{FineIDColumn, PaidDateColumn, AmountColumn, PaymentMethodColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return paymentsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		FineID:        FineIDColumn,
		PaidDate:      PaidDateColumn,
		Amount:        AmountColumn,
		PaymentMethod: PaymentMethodColumn,
		CreatedAt:     CreatedAtColumn,
		UpdatedAt:     UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
