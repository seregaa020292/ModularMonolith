//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Notifications = newNotificationsTable("public", "notifications", "")

type notificationsTable struct {
	postgres.Table

	// Columns
	ID                 postgres.ColumnString
	OwnerID            postgres.ColumnString
	FineID             postgres.ColumnString
	SentAt             postgres.ColumnTimestampz
	NotificationType   postgres.ColumnString
	NotificationStatus postgres.ColumnString
	CreatedAt          postgres.ColumnTimestampz
	UpdatedAt          postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type NotificationsTable struct {
	notificationsTable

	EXCLUDED notificationsTable
}

// AS creates new NotificationsTable with assigned alias
func (a NotificationsTable) AS(alias string) *NotificationsTable {
	return newNotificationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new NotificationsTable with assigned schema name
func (a NotificationsTable) FromSchema(schemaName string) *NotificationsTable {
	return newNotificationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new NotificationsTable with assigned table prefix
func (a NotificationsTable) WithPrefix(prefix string) *NotificationsTable {
	return newNotificationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new NotificationsTable with assigned table suffix
func (a NotificationsTable) WithSuffix(suffix string) *NotificationsTable {
	return newNotificationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newNotificationsTable(schemaName, tableName, alias string) *NotificationsTable {
	return &NotificationsTable{
		notificationsTable: newNotificationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newNotificationsTableImpl("", "excluded", ""),
	}
}

func newNotificationsTableImpl(schemaName, tableName, alias string) notificationsTable {
	var (
		IDColumn                 = postgres.StringColumn("id")
		OwnerIDColumn            = postgres.StringColumn("owner_id")
		FineIDColumn             = postgres.StringColumn("fine_id")
		SentAtColumn             = postgres.TimestampzColumn("sent_at")
		NotificationTypeColumn   = postgres.StringColumn("notification_type")
		NotificationStatusColumn = postgres.StringColumn("notification_status")
		CreatedAtColumn          = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn          = postgres.TimestampzColumn("updated_at")
		allColumns               = postgres.ColumnList{IDColumn, OwnerIDColumn, FineIDColumn, SentAtColumn, NotificationTypeColumn, NotificationStatusColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns           = postgres.ColumnList{OwnerIDColumn, FineIDColumn, SentAtColumn, NotificationTypeColumn, NotificationStatusColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return notificationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		OwnerID:            OwnerIDColumn,
		FineID:             FineIDColumn,
		SentAt:             SentAtColumn,
		NotificationType:   NotificationTypeColumn,
		NotificationStatus: NotificationStatusColumn,
		CreatedAt:          CreatedAtColumn,
		UpdatedAt:          UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
