//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Fines = newFinesTable("public", "fines", "")

type finesTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	VehicleID   postgres.ColumnString
	IssueDate   postgres.ColumnDate
	DueDate     postgres.ColumnDate
	Amount      postgres.ColumnFloat
	Status      postgres.ColumnString
	Description postgres.ColumnString
	CreatedAt   postgres.ColumnTimestampz
	UpdatedAt   postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FinesTable struct {
	finesTable

	EXCLUDED finesTable
}

// AS creates new FinesTable with assigned alias
func (a FinesTable) AS(alias string) *FinesTable {
	return newFinesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FinesTable with assigned schema name
func (a FinesTable) FromSchema(schemaName string) *FinesTable {
	return newFinesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FinesTable with assigned table prefix
func (a FinesTable) WithPrefix(prefix string) *FinesTable {
	return newFinesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FinesTable with assigned table suffix
func (a FinesTable) WithSuffix(suffix string) *FinesTable {
	return newFinesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFinesTable(schemaName, tableName, alias string) *FinesTable {
	return &FinesTable{
		finesTable: newFinesTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newFinesTableImpl("", "excluded", ""),
	}
}

func newFinesTableImpl(schemaName, tableName, alias string) finesTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		VehicleIDColumn   = postgres.StringColumn("vehicle_id")
		IssueDateColumn   = postgres.DateColumn("issue_date")
		DueDateColumn     = postgres.DateColumn("due_date")
		AmountColumn      = postgres.FloatColumn("amount")
		StatusColumn      = postgres.StringColumn("status")
		DescriptionColumn = postgres.StringColumn("description")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		allColumns        = postgres.ColumnList{IDColumn, VehicleIDColumn, IssueDateColumn, DueDateColumn, AmountColumn, StatusColumn, DescriptionColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns    = postgres.ColumnList{VehicleIDColumn, IssueDateColumn, DueDateColumn, AmountColumn, StatusColumn, DescriptionColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return finesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		VehicleID:   VehicleIDColumn,
		IssueDate:   IssueDateColumn,
		DueDate:     DueDateColumn,
		Amount:      AmountColumn,
		Status:      StatusColumn,
		Description: DescriptionColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
