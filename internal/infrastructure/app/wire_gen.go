// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"context"
	"github.com/seregaa020292/ModularMonolith/internal/config"
	"github.com/seregaa020292/ModularMonolith/internal/config/logger"
	"github.com/seregaa020292/ModularMonolith/internal/config/pg"
	"github.com/seregaa020292/ModularMonolith/internal/fine/query"
	"github.com/seregaa020292/ModularMonolith/internal/fine/repository"
	"github.com/seregaa020292/ModularMonolith/internal/infrastructure/server"
	"github.com/seregaa020292/ModularMonolith/internal/infrastructure/server/respond"
	"github.com/seregaa020292/ModularMonolith/internal/infrastructure/server/router"
	repository2 "github.com/seregaa020292/ModularMonolith/internal/notification/repository"
	repository3 "github.com/seregaa020292/ModularMonolith/internal/owner/repository"
	repository4 "github.com/seregaa020292/ModularMonolith/internal/payment/repository"
	"github.com/seregaa020292/ModularMonolith/internal/ports/httprest"
)

// Injectors from registry.go:

// NewRegistry функция использует Google Wire для автоматической сборки зависимостей.
//
// В качестве параметров принимает контекст выполнения ctx и конфигурацию cfg.
// Возвращает указатель на Registry, функцию для очистки и ошибку, если таковая возникнет.
func NewRegistry(ctx context.Context, cfg *config.Config) (*Registry, func(), error) {
	pgConfig := cfg.PG
	db, cleanup, err := pg.New(pgConfig)
	if err != nil {
		return nil, nil, err
	}
	fineRepo := repository.NewFineRepo(db)
	getListHandler := query.NewGetList(fineRepo)
	fineHandler := httprest.NewFineHandler(getListHandler)
	notificationRepo := repository2.NewNotificationRepo(db)
	notificationHandler := httprest.NewNotificationHandler(notificationRepo)
	ownerRepo := repository3.NewOwnerRepo(db)
	ownerHandler := httprest.NewOwnerHandler(ownerRepo)
	paymentRepo := repository4.NewPaymentRepo(db)
	paymentHandler := httprest.NewPaymentHandler(paymentRepo)
	vehicleHandler := httprest.NewVehicleHandler()
	openApiHandler := &httprest.OpenApiHandler{
		FineHandler:         fineHandler,
		NotificationHandler: notificationHandler,
		OwnerHandler:        ownerHandler,
		PaymentHandler:      paymentHandler,
		VehicleHandler:      vehicleHandler,
	}
	handle := respond.New()
	adminHandler := httprest.NewAdminHandler(handle)
	appApiHandler := &httprest.AppApiHandler{
		AdminHandler: adminHandler,
	}
	loggerConfig := cfg.Logger
	slogLogger := logger.New(loggerConfig)
	routerRouter, err := router.New(openApiHandler, appApiHandler, handle, slogLogger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	http := server.New(routerRouter, slogLogger)
	registry := &Registry{
		server: http,
	}
	return registry, func() {
		cleanup()
	}, nil
}

// registry.go:

type Registry struct {
	server *server.Http
}
