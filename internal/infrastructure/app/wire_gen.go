// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"context"
	"github.com/seregaa020292/ModularMonolith/internal/config"
	"github.com/seregaa020292/ModularMonolith/internal/fine/repository"
	"github.com/seregaa020292/ModularMonolith/internal/infrastructure/pg"
	"github.com/seregaa020292/ModularMonolith/internal/infrastructure/router"
	"github.com/seregaa020292/ModularMonolith/internal/ports/httprest"
)

// Injectors from service_provider.go:

func NewServiceProvider(ctx context.Context, cfg config.Config) (*serviceProvider, func(), error) {
	configPG := cfg.PG
	db, cleanup, err := pg.New(configPG)
	if err != nil {
		return nil, nil, err
	}
	fineRepo := repository.NewFineRepo(db)
	fineHandler := httprest.NewFineHandler(fineRepo)
	notificationHandler := httprest.NewNotificationHandler()
	ownerHandler := httprest.NewOwnerHandler()
	paymentHandler := httprest.NewPaymentHandler()
	vehicleHandler := httprest.NewVehicleHandler()
	adminHandler := httprest.NewAdminHandler()
	httpRest := httprest.New(fineHandler, notificationHandler, ownerHandler, paymentHandler, vehicleHandler, adminHandler)
	routerRouter := router.NewRouter(httpRest)
	appServiceProvider := &serviceProvider{
		Router: routerRouter,
	}
	return appServiceProvider, func() {
		cleanup()
	}, nil
}

// service_provider.go:

type serviceProvider struct {
	Router *router.Router
}
