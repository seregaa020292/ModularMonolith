// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получить список всех штрафов
	// (GET /fines)
	ListFines(w http.ResponseWriter, r *http.Request)
	// Создать новый штраф
	// (POST /fines)
	CreateFine(w http.ResponseWriter, r *http.Request)
	// Получить список всех уведомлений
	// (GET /notifications)
	ListNotifications(w http.ResponseWriter, r *http.Request)
	// Создать новое уведомление
	// (POST /notifications)
	CreateNotification(w http.ResponseWriter, r *http.Request)
	// Получить список всех владельцев
	// (GET /owners)
	ListOwners(w http.ResponseWriter, r *http.Request)
	// Создать нового владельца
	// (POST /owners)
	CreateOwner(w http.ResponseWriter, r *http.Request)
	// Получить список всех платежей
	// (GET /payments)
	ListPayments(w http.ResponseWriter, r *http.Request)
	// Создать новый платеж
	// (POST /payments)
	CreatePayment(w http.ResponseWriter, r *http.Request)
	// Получить список всех транспортных средств
	// (GET /vehicles)
	ListVehicles(w http.ResponseWriter, r *http.Request)
	// Создать новое транспортное средство
	// (POST /vehicles)
	CreateVehicle(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Получить список всех штрафов
// (GET /fines)
func (_ Unimplemented) ListFines(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Создать новый штраф
// (POST /fines)
func (_ Unimplemented) CreateFine(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получить список всех уведомлений
// (GET /notifications)
func (_ Unimplemented) ListNotifications(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Создать новое уведомление
// (POST /notifications)
func (_ Unimplemented) CreateNotification(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получить список всех владельцев
// (GET /owners)
func (_ Unimplemented) ListOwners(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Создать нового владельца
// (POST /owners)
func (_ Unimplemented) CreateOwner(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получить список всех платежей
// (GET /payments)
func (_ Unimplemented) ListPayments(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Создать новый платеж
// (POST /payments)
func (_ Unimplemented) CreatePayment(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получить список всех транспортных средств
// (GET /vehicles)
func (_ Unimplemented) ListVehicles(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Создать новое транспортное средство
// (POST /vehicles)
func (_ Unimplemented) CreateVehicle(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListFines operation middleware
func (siw *ServerInterfaceWrapper) ListFines(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFines(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFine operation middleware
func (siw *ServerInterfaceWrapper) CreateFine(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFine(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListNotifications operation middleware
func (siw *ServerInterfaceWrapper) ListNotifications(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListNotifications(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateNotification operation middleware
func (siw *ServerInterfaceWrapper) CreateNotification(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateNotification(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListOwners operation middleware
func (siw *ServerInterfaceWrapper) ListOwners(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListOwners(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateOwner operation middleware
func (siw *ServerInterfaceWrapper) CreateOwner(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateOwner(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPayments operation middleware
func (siw *ServerInterfaceWrapper) ListPayments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPayments(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePayment operation middleware
func (siw *ServerInterfaceWrapper) CreatePayment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePayment(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListVehicles operation middleware
func (siw *ServerInterfaceWrapper) ListVehicles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListVehicles(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateVehicle operation middleware
func (siw *ServerInterfaceWrapper) CreateVehicle(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateVehicle(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/fines", wrapper.ListFines)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/fines", wrapper.CreateFine)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/notifications", wrapper.ListNotifications)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/notifications", wrapper.CreateNotification)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/owners", wrapper.ListOwners)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/owners", wrapper.CreateOwner)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/payments", wrapper.ListPayments)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/payments", wrapper.CreatePayment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/vehicles", wrapper.ListVehicles)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/vehicles", wrapper.CreateVehicle)
	})

	return r
}

type N201Response struct {
}

type ListFinesRequestObject struct {
}

type ListFinesResponseObject interface {
	VisitListFinesResponse(w http.ResponseWriter) error
}

type ListFines200JSONResponse []Fine

func (response ListFines200JSONResponse) VisitListFinesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateFineRequestObject struct {
	Body *CreateFineJSONRequestBody
}

type CreateFineResponseObject interface {
	VisitCreateFineResponse(w http.ResponseWriter) error
}

type CreateFine201Response = N201Response

func (response CreateFine201Response) VisitCreateFineResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type ListNotificationsRequestObject struct {
}

type ListNotificationsResponseObject interface {
	VisitListNotificationsResponse(w http.ResponseWriter) error
}

type ListNotifications200JSONResponse []Notification

func (response ListNotifications200JSONResponse) VisitListNotificationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateNotificationRequestObject struct {
	Body *CreateNotificationJSONRequestBody
}

type CreateNotificationResponseObject interface {
	VisitCreateNotificationResponse(w http.ResponseWriter) error
}

type CreateNotification201Response = N201Response

func (response CreateNotification201Response) VisitCreateNotificationResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type ListOwnersRequestObject struct {
}

type ListOwnersResponseObject interface {
	VisitListOwnersResponse(w http.ResponseWriter) error
}

type ListOwners200JSONResponse []Owner

func (response ListOwners200JSONResponse) VisitListOwnersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateOwnerRequestObject struct {
	Body *CreateOwnerJSONRequestBody
}

type CreateOwnerResponseObject interface {
	VisitCreateOwnerResponse(w http.ResponseWriter) error
}

type CreateOwner201Response = N201Response

func (response CreateOwner201Response) VisitCreateOwnerResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type ListPaymentsRequestObject struct {
}

type ListPaymentsResponseObject interface {
	VisitListPaymentsResponse(w http.ResponseWriter) error
}

type ListPayments200JSONResponse []Payment

func (response ListPayments200JSONResponse) VisitListPaymentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreatePaymentRequestObject struct {
	Body *CreatePaymentJSONRequestBody
}

type CreatePaymentResponseObject interface {
	VisitCreatePaymentResponse(w http.ResponseWriter) error
}

type CreatePayment201Response = N201Response

func (response CreatePayment201Response) VisitCreatePaymentResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type ListVehiclesRequestObject struct {
}

type ListVehiclesResponseObject interface {
	VisitListVehiclesResponse(w http.ResponseWriter) error
}

type ListVehicles200JSONResponse []Vehicle

func (response ListVehicles200JSONResponse) VisitListVehiclesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateVehicleRequestObject struct {
	Body *CreateVehicleJSONRequestBody
}

type CreateVehicleResponseObject interface {
	VisitCreateVehicleResponse(w http.ResponseWriter) error
}

type CreateVehicle201Response = N201Response

func (response CreateVehicle201Response) VisitCreateVehicleResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Получить список всех штрафов
	// (GET /fines)
	ListFines(ctx context.Context, request ListFinesRequestObject) (ListFinesResponseObject, error)
	// Создать новый штраф
	// (POST /fines)
	CreateFine(ctx context.Context, request CreateFineRequestObject) (CreateFineResponseObject, error)
	// Получить список всех уведомлений
	// (GET /notifications)
	ListNotifications(ctx context.Context, request ListNotificationsRequestObject) (ListNotificationsResponseObject, error)
	// Создать новое уведомление
	// (POST /notifications)
	CreateNotification(ctx context.Context, request CreateNotificationRequestObject) (CreateNotificationResponseObject, error)
	// Получить список всех владельцев
	// (GET /owners)
	ListOwners(ctx context.Context, request ListOwnersRequestObject) (ListOwnersResponseObject, error)
	// Создать нового владельца
	// (POST /owners)
	CreateOwner(ctx context.Context, request CreateOwnerRequestObject) (CreateOwnerResponseObject, error)
	// Получить список всех платежей
	// (GET /payments)
	ListPayments(ctx context.Context, request ListPaymentsRequestObject) (ListPaymentsResponseObject, error)
	// Создать новый платеж
	// (POST /payments)
	CreatePayment(ctx context.Context, request CreatePaymentRequestObject) (CreatePaymentResponseObject, error)
	// Получить список всех транспортных средств
	// (GET /vehicles)
	ListVehicles(ctx context.Context, request ListVehiclesRequestObject) (ListVehiclesResponseObject, error)
	// Создать новое транспортное средство
	// (POST /vehicles)
	CreateVehicle(ctx context.Context, request CreateVehicleRequestObject) (CreateVehicleResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListFines operation middleware
func (sh *strictHandler) ListFines(w http.ResponseWriter, r *http.Request) {
	var request ListFinesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListFines(ctx, request.(ListFinesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListFines")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListFinesResponseObject); ok {
		if err := validResponse.VisitListFinesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateFine operation middleware
func (sh *strictHandler) CreateFine(w http.ResponseWriter, r *http.Request) {
	var request CreateFineRequestObject

	var body CreateFineJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateFine(ctx, request.(CreateFineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateFine")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateFineResponseObject); ok {
		if err := validResponse.VisitCreateFineResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListNotifications operation middleware
func (sh *strictHandler) ListNotifications(w http.ResponseWriter, r *http.Request) {
	var request ListNotificationsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListNotifications(ctx, request.(ListNotificationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListNotifications")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListNotificationsResponseObject); ok {
		if err := validResponse.VisitListNotificationsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateNotification operation middleware
func (sh *strictHandler) CreateNotification(w http.ResponseWriter, r *http.Request) {
	var request CreateNotificationRequestObject

	var body CreateNotificationJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateNotification(ctx, request.(CreateNotificationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateNotification")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateNotificationResponseObject); ok {
		if err := validResponse.VisitCreateNotificationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListOwners operation middleware
func (sh *strictHandler) ListOwners(w http.ResponseWriter, r *http.Request) {
	var request ListOwnersRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListOwners(ctx, request.(ListOwnersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListOwners")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListOwnersResponseObject); ok {
		if err := validResponse.VisitListOwnersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateOwner operation middleware
func (sh *strictHandler) CreateOwner(w http.ResponseWriter, r *http.Request) {
	var request CreateOwnerRequestObject

	var body CreateOwnerJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOwner(ctx, request.(CreateOwnerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOwner")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateOwnerResponseObject); ok {
		if err := validResponse.VisitCreateOwnerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListPayments operation middleware
func (sh *strictHandler) ListPayments(w http.ResponseWriter, r *http.Request) {
	var request ListPaymentsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListPayments(ctx, request.(ListPaymentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListPayments")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListPaymentsResponseObject); ok {
		if err := validResponse.VisitListPaymentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreatePayment operation middleware
func (sh *strictHandler) CreatePayment(w http.ResponseWriter, r *http.Request) {
	var request CreatePaymentRequestObject

	var body CreatePaymentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePayment(ctx, request.(CreatePaymentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePayment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreatePaymentResponseObject); ok {
		if err := validResponse.VisitCreatePaymentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListVehicles operation middleware
func (sh *strictHandler) ListVehicles(w http.ResponseWriter, r *http.Request) {
	var request ListVehiclesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListVehicles(ctx, request.(ListVehiclesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListVehicles")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListVehiclesResponseObject); ok {
		if err := validResponse.VisitListVehiclesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateVehicle operation middleware
func (sh *strictHandler) CreateVehicle(w http.ResponseWriter, r *http.Request) {
	var request CreateVehicleRequestObject

	var body CreateVehicleJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateVehicle(ctx, request.(CreateVehicleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateVehicle")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateVehicleResponseObject); ok {
		if err := validResponse.VisitCreateVehicleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
