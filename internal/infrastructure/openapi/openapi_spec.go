// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8SYzW7bRhDHX0XY9lY6UpIeAt2aogECFEnQQy6BIWzElbQByWWWyzSGQUC2mzSAA+SS",
	"W4EGeQNBtRqltulXmH2jYnf5IYpbfdlST5bF4Xz85s/ZoQ5Rl/khC0ggItQ+RJxEIQsiov+507qt/rgk",
	"6nIaCsoC1EY/coIFcVHioO9bLXW9ywJBAqE+4jD0aBcr02bI2XOP+N+9iNR9hyjqDoiP1advOemhNvqm",
	"WcZumqtR8yfOGUdJkjhzce9jt/ELeRmTSCB1NbtB+TP3tA9RyFlIuKAm/S5zifrbY9zHArURDcTdO8hB",
	"4iAk5l/SJ1xV4pMown1tnV2MBKdBX0fi5GVMOXFR+5nxWdrvF87Y8xekK5SvBzQg9WSwz2LDqEin5zEs",
	"ynSC2H9usukaxB1ctXexIHuC+qS8J89yDtah5XpMOspBzaPNGXUrZnFM3ZqZg17vMRzSPYWkT4I98lpw",
	"vCdwX9f7CnvUxCv4OdqPIkqjaJ10IoFFHFnLikN3bVSvyIB2PdJZpcr5/s/cWyljBrCT97pI3KaSR0zQ",
	"XvaoWKS7gQJ6NFixptUanDgomEmys6ALFTtz1WLFfg0IXzXDiARirfLXV8Jca4v0SpS2yuxUbC1+rBze",
	"TG+Jj6lnhdqLPa8TYN+OfEXYHu2SICKdbATZPIUDFpAbegTnwJcl1DLJ4+YEbJif4AM/O352O3K38MCF",
	"mLr2ufifWYSm/I5PxIC5W+pQ8TwUo20urK0xT82svJknYE0lh14GsWbhM5d4159P12ZazTTPayaLOlJ9",
	"dAY9Vl/KfnjysAFncC4/NOQJXMkhjGAM5zCBS5iqL9/JY/Wl/A1GcAHTBnyBUQMuYSSH8kS+KwzhE3yE",
	"jw1lMZVvGpDCFZzDSB5DCl9VTVSojuqA8gim8kgewwQu5OmMrTydDZjCGKlDl0cm19u3WrdamndIAhxS",
	"1EZ39VdKVGKgFdJUitOf+kQDVvLRA/ehi9roZxqJB9rCmd9YF22k9U2UCuJHy1ZSvdAlRTcw5/jAtqHC",
	"Z7hSRCCFf+YBlNuyLVJRQ1MZ6e029n3MD5TXT5DCuTyRv8NUHsv3CnsZBsbyCCbyTR24WcSeIcNpX00K",
	"FllYmn1e12gESiJxn7kHa3Fcjq8qf8FjkjjWt43FfJTRNVh+hhS+wJkW6Xul/xTG8hS+zuCzoEsc1Jw9",
	"9BcL81HFchcCreySawv1BMYwgTNI4SKfGPB1QxHafZVEq2yWibJS13bEWUV3kyJdLjxIYWJHNlmATIlR",
	"nxGLVfjYmOxCfmbPXVd3+nwawRlM4Fy+l29hosbkJqqzeioBZiSWic1UsR2VZYR2Lq+/IK3TGdnYKFVl",
	"K91iXT3JjXahrHy1X1tb+dIygb9hsuk0q3kpuRUUlqkqr2A7uir47FZZ+sScpWMnozSV/V6yWFNPc6Nd",
	"aCp/K1n7nNT7AVxqraRyKI/hUp6qQ+9IDtUE16vwhiNsVecl54LZMgXm9W5HgQXN/+PotEAzFyrQILVj",
	"02EIf6VP0mfzb1Twh+oQjNTQVL1QO6Lq1VAd13KIHBRzD7XRQIiw3Wx6rIu9AYtE+17rXgsl+0XImuM/",
	"4Ur7Gcm3MIWpo/yO5Qf1RgaXOpSqwDK39Yvb6koxPwrlIz5xNk3EHtEkUwWtMywjF6yvEXvF99YyqNnZ",
	"N49YGfoZ8vlXqyxUMequUZ9l+5MfTKVppXr5pgxcXQmT/eTfAAAA//+OmHoPxhkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
