// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8SYzW7bRhDHX0XY9shGSnsJeGsLBAhQJDnlEhjCRlxZG5BcllymMAwCsl2nAWzAl9wK",
	"NMgbCKrZyJVFv8LsGxW7yw9R2kqibCkny+JwPn7z5+xQx6jHvID5xOcRso9RSKKA+RFR/3zfeSz/OCTq",
	"hTTglPnIRj+HBHPioCSxUNQbEA8r26fUJ/JvELKAhJxqD9hjsc/lpz4LPcyRjfouwxxZiB8FBNnIj703",
	"JESJhXracRfX7R3MyXeceqS6J+Ih9Q/lPbXUjg3XY9KVDpY8mpxRp2YWx9QxmkVRE68RxzyOjNnFgdO4",
	"4ndkQHsu6W6UbGKhkPwa05A4yH49f2+tjDlOVtGyMvGD0it785b0uEziOeO0T3u44F5v+jaN7FN/w5o2",
	"7pM/l2R3RRdqdvqqwYr95pNw0wwj4vNG5TdXwkJry/QqlKbKzFRMLX4hHT5Mb4mHqWuE2o9dt+tjz4x8",
	"Q9gu7RE/It18kpg8BQPmkwd6BBfAVyUsZVLELQiYML/ERx7RE3K/k3MHD1yAqWOei/+bRaDL73qED5iz",
	"ow6Vz0M52hbCmhrzSs/Kh3kCGio5cHOISxYec4h7//l0b6b1TIu85rJYRipdUL/PljeKH18+a8E1TMVV",
	"S5zBnRjCCMYwhRRmMJFffhCn8kvxO4zgFiYt+AKjFsxgJIbiTHwoDeETfISPLWkxEectyOAOpjASp5DB",
	"jayJctlRFVCcwESciFNI4VZczNmKi/mAGYyRPHTDSOf6+FHnUUfxDoiPA4ps9IP6SoqKD5RC2lJx6tMh",
	"UYClfNTAfeYgG/1CI/5UWViL61ZHCYz5PB8JOAjcfFa330b6rNU7l/xEOfHUjd+GpI9s9E272uXa+WrW",
	"VntZUnYDhyE+0s2oNwE+w50kAhn8uwhArXqx5+HwSFp+ggym4kz8ARNxKi4lyupWGIsTSMX5MkSODyOp",
	"HV37gXz6WWTgoxdMlbcWHYn4T8w5asRmPZK6pHkYk8Qyrr8mV6VdWxot8PkMGXyBayWmS6nTDMbiAm7m",
	"kBhwJBZqzx/OqwX0vGa5DyHVdr7GgjqDMaRwDRncFk823GwpLLOvimidzTqh1erajeDq6PYrPMggNSNL",
	"VyCTYlSzfLUKX2iTfchP76NNdafOkRFcQwpTcSneQ7rtODN6qgDmJNaJTVexG5XlhPYur78hW6YzMrGR",
	"qspXr9W6elkY7UNZxQreWFvFcpHCP5BuO82WvFTcSgrrVFVUsBtdlXy+wok5T8dMRmoq/11jtaZeFUb7",
	"0FTx9tD4nFT7AcyUVjIxFKcwExfy0DsRQznB1cq67Ua2ofOKc8lsnQKLenejwJLm1zg6DdD0hRo0yMzY",
	"VBgSvlMn6evFNx/4U3YIRnJoyl7IHVH2aiiPazFEFopDF9lowHlgt9su62F3wCJuP+k86aDkoAy55Pgv",
	"uFN+RuI9TGBiSb9jcSXfnGCmQskKDHNbvWBtrhT9400x4hNr20TMEXUyddAqwypyyfoesTd8v6yC6p19",
	"+4i1oZ8jX3xdykOVo+4e9Rm2P3GlK81q1YvzKnB9JUwOkv8CAAD//1Vi1xYrGAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
