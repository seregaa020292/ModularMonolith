/*
Package gog содержит общие, обобщённые расширения для языка Go,
требующие использования обобщений (введённых в Go 1.18).
*/
package gog

// If возвращает vtrue, если cond истинно, иначе vfalse.
//
// Полезно для избежания оператора if при инициализации переменных, например:
//
//	min := If(i > 0, i, 0)
func If[T any](cond bool, vtrue, vfalse T) T {
	if cond {
		return vtrue
	}
	return vfalse
}

// Ptr возвращает указатель на переданное значение.
//
// Полезно, когда у вас есть значение и нужен указатель, например:
//
//	func f() string { return "foo" }
//
//	foo := struct{
//	    Bar *string
//	}{
//	    Bar: Ptr(f()),
//	}
func Ptr[T any](v T) *T {
	return &v
}

// Must принимает 2 аргумента, второй из которых - ошибка.
// Если err не nil, Must вызывает панику. В противном случае возвращается первый аргумент.
//
// Полезно, когда входные данные для некоторой функции предоставляются в исходном коде,
// и вы уверены, что они действительны (если нет, вызов паники приемлем).
// Например:
//
//	t := Must(time.Parse("2006-01-02", "2022-04-20"))
func Must[T any](v T, err error) T {
	if err != nil {
		panic(err)
	}
	return v
}

// First возвращает первый аргумент.
// Полезно, когда вы хотите использовать первый результат вызова функции, который имеет более одного возвращаемого значения
// (например, в составном литерале или в условии).
//
// Например:
//
//	func f() (i, j, k int, s string, f float64) { return }
//
//	p := image.Point{
//	    X: First(f()),
//	}
func First[T any](first T, _ ...any) T {
	return first
}

// Second возвращает второй аргумент.
// Полезно, когда вы хотите использовать второй результат вызова функции, который имеет более одного возвращаемого значения
// (например, в составном литерале или в условии).
//
// Например:
//
//	func f() (i, j, k int, s string, f float64) { return }
//
//	p := image.Point{
//	    X: Second(f()),
//	}
func Second[T any](_ any, second T, _ ...any) T {
	return second
}

// Third возвращает третий аргумент.
// Полезно, когда вы хотите использовать третий результат вызова функции, который имеет более одного возвращаемого значения
// (например, в составном литерале или в условии).
//
// Например:
//
//	func f() (i, j, k int, s string, f float64) { return }
//
//	p := image.Point{
//	    X: Third(f()),
//	}
func Third[T any](_, _ any, third T, _ ...any) T {
	return third
}

// Coalesce возвращает первое ненулевое значение из перечисленных аргументов.
// Возвращает нулевое значение параметра типа, если аргументы не переданы или все они являются нулевыми значениями.
// Полезно, когда вы хотите инициализировать переменную первым ненулевым значением из списка запасных значений.
//
// Например:
//
//	hostVal := Coalesce(hostName, os.Getenv("HOST"), "localhost")
//
// Примечание: та же функциональность была добавлена в Go 1.22 в cmp.Or()
func Coalesce[T comparable](values ...T) (v T) {
	var zero T
	for _, v = range values {
		if v != zero {
			return
		}
	}
	return
}

// Deref "безопасно" разыменовывает указатель, возвращает указанное значение.
// Если указатель равен nil, возвращается def.
// Если def не указан, возвращается нулевое значение T.
func Deref[T any](p *T, def ...T) (result T) {
	if p != nil {
		return *p
	}
	if len(def) > 0 {
		return def[0]
	}
	return
}
