services:
  app-api:
    build:
      context: ../
      dockerfile: ./build/Dockerfile
      target: ${ENV:-development}
    volumes:
      - type: bind
        source: ../
        target: /app
    ports:
      - "${APP_PORT:-8080}:8080"
    environment:
      APP_NAME: ${APP_NAME}
      ENV: ${ENV}
      CORS_ORIGINS: ${CORS_ORIGINS}
      LOG_FORMATTER: ${LOG_FORMATTER}
      LOG_LEVEL: ${LOG_LEVEL}
      PG_DB: ${PG_DB}
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}
      PG_HOST: ${PG_HOST}
      PG_PORT: ${PG_PORT:-5432}
    restart: on-failure

  app-swagger:
    image: swaggerapi/swagger-ui
    environment:
      SWAGGER_JSON: /specification/swagger.yml
    ports:
      - "${SWAGGER_UI_PORT:-8081}:8080"
    volumes:
      - type: bind
        source: ../pkg/specification/openapi
        target: /specification
        read_only: true

  app-pg:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${PG_DB}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
    ports:
      - "54321:${PG_PORT:-5432}"
    volumes:
      - type: volume
        source: app-pg_volume
        target: /var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready -d ${PG_DB} -U ${PG_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure

volumes:
  app-pg_volume:

networks:
  default:
    name: ${PROJECT_NAME}
    driver: bridge
